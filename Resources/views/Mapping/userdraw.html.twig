<div class="row-fluid">

    <div class="span12">
        <h4 id="title">User Draw Geometry Features:</h4>

        <form class="form-inline"  style="display: inline-block;">
            <label>Geometry type&nbsp;</label>
            <select id="mapping-userdraw-type">
                <option value="None">None</option>
                <option value="Point">Point</option>
                <option value="LineString">LineString</option>
                <option value="Polygon">Polygon</option>
                <option value="Circle">Circle</option>
                <option value="Square">Square</option>
                <option value="Box">Box</option>
            </select>
        </form>
        <div style="display: inline-block;">
            <label>Point type&nbsp;</label>
            <select id="mapping-userdraw-point-type" class="marker_image_type">
                <option value=null >&nbsp;</option>
                {% if marker_image_types is defined and marker_image_types|length>0 %}
                    {% for marker_image_type in marker_image_types %}
                        <option value="{{marker_image_type}}" style="background-image:url(/images/markers/{{marker_image_type}});" {% if marker_image_type =='marker-icon.png' %} selected {% endif %}></option>
                    {% endfor %}
                {% endif %}
            </select>
        </div>
    </div>
    <div style="width:100%;position: absolute;bottom:40px;margin-bottom: 4px;padding-bottom: 4px;border-bottom: 1px solid gainsboro;">
        <div style="display: inline-block;"><label>Save as a layer:&nbsp;</label><input type="checkbox" style="margin: 0 2px 0 5px;"></div>
        <div style="display: inline-block;"><label>Layer name:&nbsp;</label><input type="text" style="width:120px;"></div>
    </div>

    <div style="position: absolute;bottom:5px;">
        <button type="button" class="btn btn-sm btn-default" value="Clear" style="margin-bottom: 5px;display: inline-block;">Clear</button>
        <button type="button" class="btn btn-sm btn-default" value="Delete" style="margin-bottom: 5px;display: inline-block;">Delete</button>
        <button type="button" class="btn btn-sm btn-default" value="Save" style="margin-bottom: 5px;display: inline-block;">Save</button>
    </div>
</div>

<script>
    $(function () {
        var source = new ol.source.Vector({wrapX: false});

        var vector = new ol.layer.Vector({
            source: source,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: '#ffcc33',
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({
                        color: '#ffcc33'
                    })
                })
            })
        });


        var bexist = false;
        window.app.map.getLayers().forEach(function (layer, i) {

            if (layer.get('name') === 'mapping-userdraw')
            {
                bexist = true;
            }
        });
        if (bexist === false) {

            window.app.map.addLayer(vector);
        }
        var typeSelect = document.getElementById('mapping-userdraw-type');
        var draw; // global so we can remove it later

        function addInteraction() {
            var value = typeSelect.value;
            if (value !== 'None') {
                var geometryFunction, maxPoints;
                if (value === 'Square') {
                    value = 'Circle';
                    geometryFunction = ol.interaction.Draw.createRegularPolygon(4);
                } else if (value === 'Box') {
                    value = 'LineString';
                    maxPoints = 2;
                    geometryFunction = function (coordinates, geometry) {
                        if (!geometry) {
                            geometry = new ol.geom.Polygon(null);
                        }
                        var start = coordinates[0];
                        var end = coordinates[1];
                        geometry.setCoordinates([
                            [start, [start[0], end[1]], end, [end[0], start[1]], start]
                        ]);
                        return geometry;
                    };
                }
                draw = new ol.interaction.Draw({
                    source: source,
                    type: /** @type {ol.geom.GeometryType} */ (value),
                    geometryFunction: geometryFunction,
                    maxPoints: maxPoints
                });
                window.app.map.addInteraction(draw);
                draw.on("drawend", function (event) {

                    var geoJsonGeom = new ol.format.GeoJSON();
                    var pp = geoJsonGeom.writeGeometry(event.feature.getGeometry());

                    console.log('type:' + event.feature.getGeometry().getType());

                    if (typeof event.feature.getGeometry().getRadius === 'function') {
                        console.log('radius:' + event.feature.getGeometry().getRadius());
                        console.log('center:' + event.feature.getGeometry().getCenter());
                    }
                    if (event.feature.getGeometry().getType() === 'Point') {
                        var marker_image = $("div.ol3map-sidebar-panel-content select.marker_image_type").val();
                        if (marker_image !== null && marker_image !== 'null' && marker_image !== undefined && marker_image.trim().length > 0) {
                            var iconStyle = new ol.style.Style({
                                image: new ol.style.Icon({
                                    src: '/images/markers/' + marker_image,
                                    anchor: [.5, 1],
                                    anchorXUnits: 'fraction', anchorYUnits: 'fraction',
                                    opacity: .9
                                })
                            });
                            event.feature.setStyle(iconStyle);
                        }
                    }
                    console.log(pp);
                    //    alert($("div.ol3map-sidebar-panel-content select.marker_image_type").val());
                });
            }
        }
        /**
         * Let user change the geometry type.
         * @param {Event} e Change event.
         */
        typeSelect.onchange = function (e) {
            window.app.map.removeInteraction(draw);
            addInteraction();
        };

        addInteraction();
        $("button[type='button'][value='Clear']").click(function () {
            source.clear();
        });
        $("div.ol3map-sidebar-panel-content select.marker_image_type").unbind("change");
        $("div.ol3map-sidebar-panel-content select.marker_image_type").change(function () {
            if ($(this).val() === null || $(this).val() === 'null') {
                $("div.ol3map-sidebar-panel-content select.marker_image_type").css("background-image", '');
            }
            else {
                $("div.ol3map-sidebar-panel-content select.marker_image_type").css("background-image", "url(/images/markers/" + $(this).val() + ")");
            }
        });
        $("div.ol3map-sidebar-panel-content select.marker_image_type").trigger("change");
    });
</script>